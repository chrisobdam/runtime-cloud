apiVersion: core.oam.dev/v1beta1
kind: Application
metadata:
  name: bb-runtime-cloud
  annotations:
    version: v0.0.1
    description: "wasmCloud based runtime for the Betty Blocks low-code platform"
spec:
  components:
    - name: graphql-server
      type: component
      properties:
        image: file://./graphql-server/build/graphql_server_s.wasm
      traits:
        # Govern the spread/scheduling of the component
        - type: spreadscaler
          properties:
            instances: 1
        - type: link
          properties:
            name: action-runner
            target: action-runner
            namespace: bettyblocks
            package: runtime-cloud
            interfaces: [action-runner]
        - type: link
          properties:
            name: cloud-artefact
            target: cloud-artefact
            namespace: bettyblocks
            package: runtime-cloud
            interfaces: [meta-artefact]
    - name: action-runner
      type: component
      properties:
        image: file://./action-runner/build/action_runner_s.wasm
      traits:
        # Govern the spread/scheduling of the component
        - type: spreadscaler
          properties:
            instances: 1
        - type: link
          properties:
            name: action-example-a
            target: action-example-a
            namespace: bettyblocks
            package: runtime-cloud
            interfaces: [action]
        - type: link
          properties:
            name: action-example-b
            target: action-example-b
            namespace: bettyblocks
            package: runtime-cloud
            interfaces: [action]
    - name: action-example-a
      type: component
      properties:
        image: file://./action-example-a/build/action_example_a_s.wasm
      traits:
        # Govern the spread/scheduling of the component
        - type: spreadscaler
          properties:
            instances: 1
    - name: action-example-b
      type: component
      properties:
        image: file://./action-example-b/build/action_example_b_s.wasm
      traits:
        # Govern the spread/scheduling of the component
        - type: spreadscaler
          properties:
            instances: 1
        - type: link
          properties:
            target: data-api-gql-proxy
            namespace: bettyblocks
            package: runtime-cloud
            interfaces: [system-info]
    - name: cloud-artefact
      type: component
      properties:
        image: file://./cloud-artefact/build/cloud_artefact_s.wasm
      traits:
        # Govern the spread/scheduling of the component
        - type: spreadscaler
          properties:
            instances: 1
        - type: link
          properties:
            target: nats-kv
            namespace: wasi
            package: keyvalue
            interfaces: [store]
            # NOTE: The following is an example of how to configure the NATS Kv capability provider, for an individual component
            target_config:
              - name: CLOUDARTEFACT
                properties:
                  bucket: "CLOUDARTEFACT"
                  enable_bucket_auto_create: "true"

    # Providers
    - name: httpserver
      type: capability
      properties:
        image: ghcr.io/wasmcloud/http-server:0.23.2
        config:
          - name: http-config
            properties:
              routing_mode: "path"
              default_address: "127.0.0.1:8000"
        ## To configure OTEL integration for this provider specifically, uncomment the lines below
        # config:
        #   - name: otel
        #     properties:
        #       otel_exporter_otlp_endpoint: "http://all-in-one:4318"
        #       otel_exporter_otlp_traces_endpoint: "http://traces-backend/v1/traces"
        #       otel_exporter_otlp_metrics_endpoint: "http://metrics-backend/v1/metrics"
        #       otel_exporter_otlp_logs_endpoint: "http://logs-backend/v1/logs"
      traits:
        # Establish a unidirectional link from this http server provider (the "source")
        # to the `http-component` component (the "target") so the component can handle incoming HTTP requests,
        #
        # The source (this provider) is configured such that the HTTP server listens on 127.0.0.1:8000
        - type: link
          properties:
            name: graphql
            target: graphql-server
            namespace: wasi
            package: http
            interfaces: [incoming-handler]
            source_config:
              - name: graphql-http
                properties:
                  path: "/graphql"
        - type: link
          properties:
            name: cloud_artefact
            target: cloud-artefact
            namespace: wasi
            package: http
            interfaces: [incoming-handler]
            source_config:
              - name: artefact-http
                properties:
                  path: "/artefact-webhook"
    - name: data-api-gql-proxy
      type: capability
      properties:
        image: file://./data-api-gql-proxy/build/data-api-gql-proxy.par.gz
        config:
          - name: provider-config
            properties:
              foo: bar
    # Add a capability provider that implements `wasi:keyvalue` using NATS
    - name: nats-kv
      type: capability
      properties:
        # image: file://../../../../src/bin/keyvalue-nats-provider/build/keyvalue-nats-provider.par.gz
        image: ghcr.io/wasmcloud/keyvalue-nats:0.3.1
        ## NOTE: The following is an example of how to provide default/shared configuration, to all components, which do not provide their own NATS connection configuration.
        # config:
        #   - name: nats-connection
        #     properties:
        #       cluster_uri: "nats://0.0.0.0:4222"
        #       bucket: "WASMCLOUD"
        ## To configure OTEL integration for this provider specifically, uncomment the lines below
        #   - name: otel
        #     properties:
        #       otel_exporter_otlp_endpoint: "http://all-in-one:4318"
        #       otel_exporter_otlp_traces_endpoint: "http://traces-backend/v1/traces"
        #       otel_exporter_otlp_metrics_endpoint: "http://metrics-backend/v1/metrics"
        #       otel_exporter_otlp_logs_endpoint: "http://logs-backend/v1/logs"
